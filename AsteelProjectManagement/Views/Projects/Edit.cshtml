@model AsteelProjectManagement.Models.StepperViewModel

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Stepper Example</title>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <style>
        .stepper {
            display: flex;
            justify-content: space-between;
            margin-bottom: 20px;
            padding: 0;
            list-style: none;
        }

        .step {
            text-align: center;
            flex: 1;
            position: relative;
            cursor: pointer;
        }

            .step:not(:last-child)::after {
                content: '';
                height: 2px;
                background-color: #e0e0e0;
                position: absolute;
                top: 15px;
                left: 50%;
                right: -50%;
                z-index: 1;
            }

            .step .step-circle {
                width: 30px;
                height: 30px;
                background-color: #e0e0e0;
                border-radius: 50%;
                display: inline-block;
                line-height: 30px;
                color: #fff;
            }

            .step.active .step-circle {
                background-color: #007bff;
            }

            .step .step-title {
                margin-top: 10px;
                font-size: 14px;
                color: #6c757d;
            }

            .step.active .step-title {
                color: #007bff;
            }

        .step-content .step-pane {
            display: none;
        }

            .step-content .step-pane.active {
                display: block;
            }
    </style>
</head>
<body>

    <div class="container mt-5">
        <ul class="stepper">
            <li class="step active" data-step="1">
                <span class="step-circle">1</span>
                <span class="step-title">Step 1</span>
            </li>
            <li class="step" data-step="2">
                <span class="step-circle">2</span>
                <span class="step-title">Step 2</span>
            </li>
            <li class="step" data-step="3">
                <span class="step-circle">3</span>
                <span class="step-title">Step 3</span>
            </li>
            <li class="step" data-step="4">
                <span class="step-circle">4</span>
                <span class="step-title">Step 4</span>
            </li>
            <li class="step" data-step="5">
                <span class="step-circle">5</span>
                <span class="step-title">Step 5</span>
            </li>
            <li class="step" data-step="6">
                <span class="step-circle">6</span>
                <span class="step-title">Step 6</span>
            </li>
        </ul>

        <div class="step-content">
            <div class="step-pane active" data-step="1">
                <h3>Step 1 Content</h3>
                <form id="step1-form">
                    @Html.Partial("~/Views/Projects/CreateEdit.cshtml", Model)
                    <button type="button" class="btn btn-primary next-step">Continue</button>
                </form>
            </div>
            <div class="step-pane" data-step="2">
                <h3>Step 2 Content</h3>
                <form id="step2-form">
                    @Html.Partial("~/Views/Projects/AddLinkEdit.cshtml", Model)
                    <button type="button" class="btn btn-secondary previous-step">Back</button>
                    <button type="button" class="btn btn-primary next-step">Continue</button>
                </form>
            </div>
            <div class="step-pane" data-step="3">
                <h3>Step 3 Content</h3>
                <form id="step3-form">
                    @Html.Partial("~/Views/Versions/Edit.cshtml", Model)
                    <button type="button" class="btn btn-secondary previous-step">Back</button>
                    <button type="button" class="btn btn-primary next-step">Continue</button>
                </form>
            </div>
            <div class="step-pane" data-step="4">
                <h3>Step 4 Content</h3>
                <form id="step4-form">
                    @Html.Partial("~/Views/Projects/AddAttachmentEdit.cshtml", Model)
                    <button type="button" class="btn btn-secondary previous-step">Back</button>
                    <button type="button" class="btn btn-primary next-step">Continue</button>
                </form>
            </div>
            <div class="step-pane" data-step="5">
                <h3>Step 5 Content</h3>
                <form id="step5-form">
                    @Html.Partial("~/Views/Comments/Edit.cshtml", Model)
                    <button type="button" class="btn btn-secondary previous-step">Back</button>
                    <button type="button" class="btn btn-primary next-step">Continue</button>
                </form>
            </div>
            <div class="step-pane" data-step="6">
                <h3>Step 6 Content</h3>
                <button type="button" class="btn btn-secondary previous-step">Back</button>
                <button type="button" class="btn btn-success finish-step">Finish</button>
            </div>
        </div>
    </div>

    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <script>
        $(document).ready(function () {
            var stepper = $('.stepper');
            var stepContents = $('.step-content .step-pane');

            $.fn.activateStep = function (stepNumber, callback) {
                var step = stepper.find('.step').filter('[data-step="' + stepNumber + '"]');
                step.addClass('active').siblings().removeClass('active');
                stepContents.removeClass('active').filter('[data-step="' + stepNumber + '"]').addClass('active');
                if (callback) callback();
            };

            $.fn.deactivateStep = function (callback) {
                var step = $(this);
                step.removeClass('active').addClass('done');
                if (callback) callback();
            };

            function validateStep(stepNumber) {
                var form = $('#step' + stepNumber + '-form');
                return form[0].checkValidity();
            }

            function goToStep(stepNumber) {
                var currentStep = stepper.find('.step.active');
                if (currentStep.data('step') === stepNumber) {
                    return;
                }
                if (validateStep(currentStep.data('step'))) {
                    currentStep.deactivateStep(function () {
                        stepper.find('.step').filter('[data-step="' + stepNumber + '"]').activateStep(stepNumber);
                    });
                } else {
                    alert('Please complete the required fields.');
                }
            }

            stepper.find('.step').each(function (index) {
                if (index === 0) {
                    $(this).activateStep(1);
                } else {
                    $(this).removeClass('active');
                }
            });

            stepper.on('click', '.step', function () {
                var stepNumber = $(this).data('step');
                goToStep(stepNumber);
            });

            stepContents.on('click', '.next-step', function () {
                var activeStep = stepper.find('.step.active');
                var stepNumber = activeStep.data('step');
                if (validateStep(stepNumber)) {
                    var nextStep = activeStep.next('.step');
                    if (nextStep.length > 0) {
                        activeStep.deactivateStep(function () {
                            nextStep.activateStep(nextStep.data('step'));
                        });
                    }
                } else {
                    alert('Please complete the required fields.');
                }
            });

            stepContents.on('click', '.previous-step', function () {
                var activeStep = stepper.find('.step.active');
                var prevStep = activeStep.prev('.step');
                if (prevStep.length > 0) {
                    activeStep.deactivateStep(function () {
                        prevStep.activateStep(prevStep.data('step'));
                    });
                }
            });

            stepContents.on('click', '.finish-step', function () {
                var formData = new FormData();
                $('#step1-form, #step2-form, #step3-form, #step4-form, #step5-form').each(function () {
                    $(this).find('input, select, textarea').each(function () {
                        if (this.name) {
                            formData.append(this.name, $(this).val());
                        }
                    });
                });

                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("Edit", "Projects")',  // Replace with your controller/action method
                    data: formData,
                    contentType: false,
                    processData: false,
                    success: function (response) {
                        alert('All steps completed successfully.');
                        window.location.href = '@Url.Action("Index", "Projects")';  // Replace with your redirect URL
                    },
                    error: function (xhr, status, error) {
                        alert('An error occurred while submitting the form: ' + error);
                    }
                });
            });
        });
    </script>

</body>
</html>
